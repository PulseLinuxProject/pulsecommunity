generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  password  String?
  image     String?
  bio       String?
  createdAt DateTime  @default(now())
  threads   Thread[]
  comments  Comment[]
  votes     Vote[]
}

model Thread {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  tags      Tag[]
  comments  Comment[]
  images    Image[]
}

model Image {
  id       String @id @default(cuid())
  url      String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  votes     Vote[]
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
}

model Vote {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  threads Thread[]
}
